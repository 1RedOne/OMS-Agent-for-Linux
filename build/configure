#!/bin/bash

scxomi_dir=`(cd ../../omi/Unix; pwd -P)`
scxpal_dir=`(cd ../../pal; pwd -P)`

enable_debug=""
enable_debug_flag=0
enable_purify_agent=""
enable_purify_server=""
enable_omi_tools=""
enable_omi_tools_flag=0
opensource_distro=0
build_type=Release
ULINUX=0
NOULINIX=0

# Default OMI qualifiers for build purposes
omi_configure_quals="--prefix=/opt/omi --localstatedir=/var/opt/omi --sysconfdir=/etc/opt/omi/conf --certsdir=/etc/opt/omi/ssl"

if [ ! -d "$scxomi_dir" ]; then
    echo "OMI directory ($scxomi_dir) does not exist" >& 2
    exit 1
fi

#
# Ruby configuration qualifiers
#

# Make sure we have the obvious build requirements for Ruby ...

ruby -v 2>/dev/null 1>&2
if [ $? -ne 0 ]; then
    echo "Any version of Ruby must be installed in order to build Ruby" >& 2
    exit 1
fi

bison -V 2>/dev/null 1>&2
if [ $? -ne 0 ]; then
    echo "The bison program must be installed in order to build Ruby" >& 2
    exit 1
fi

# And some version of git must be installed in order to build fluentd ...

git --version 2>/dev/null 1>&2
if [ $? -ne 0 ]; then
    echo "Any version of git must be installed in order to build fluentd" >& 2
    exit 1
fi

# Note: Ruby has optimization issues with g++ v4.1.2 due to G++ bug # 18251:
#   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=18251

gcc_compiler_bug_18251_resolved() {
    # POSIX Semantic Version <= Test
    # Exit code 0 is success (i.e. true), meaning optimization is necessary
    #
    # Parameter: "x.y.z" (like "4.2.2"), for major.minor.patch versions

    # Current version installed
    local MAJOR=`echo $1 | cut -d. -f1`
    local MINOR=`echo $1 | cut -d. -f2`
    local PATCH=`echo $1 | cut -d. -f3`

    # Version with the compiler bug
    local TEST_MAJOR=4
    local TEST_MINOR=1
    local TEST_PATCH=2

    # Check bounds on MAJOR
    if [ $MAJOR -lt $TEST_MAJOR ]; then
	return 0
    elif [ $MAJOR -gt $TEST_MAJOR ]; then
	return 1
    fi

    # MAJOR matched, so check bounds on MINOR
    if [ $MINOR -lt $TEST_MINOR ]; then
	return 0
    elif [ $MINOR -gt $TEST_MINOR ]; then
	return 1
    fi

    # MINOR matched, so check bounds on PATCH
    if [ $PATCH -lt $TEST_PATCH ]; then
	return 0
    elif [ $PATCH -gt $TEST_PATCH ]; then
	return 1
    fi

    # PATCH matched, so it is equal
    return 0
}

GCC_VERSION=`g++ --version | head -1 | awk '{print $3}'`

gcc_compiler_bug_18251_resolved $GCC_VERSION
if [ $? -eq 0 ]; then
    echo "ERROR: Can't build Ruby due to compiler bug #18251" >& 2
    exit 1
fi

# List of ruby extensions. Disable everything, remove if:
#   1. We absolutely need something, and
#   2. We can guarantee (and insure) machine requirements for extension (at both build-time and run-time)

# TODO: Bundler requires openssl ... need to figure out how to deal with this!

RUBY_EXTENSIONS="continuation,coverage,dbm,fiber,fiddle,gdbm,mathn,nkf,objspace,pty,racc,rbconfig,readline,ripper,sdbm,tk,win32,win32ole"

ruby_configure_quals="--disable-install-doc --with-out-ext=${RUBY_EXTENSIONS} --prefix=/opt/microsoft/omsagent/ruby"

for opt
do

  arg=`expr "x$opt" : 'x[^=]*=\(.*\)'`

  case $opt in

    -h | --help)
      help=1
    ;;

    --enable-debug)
      enable_debug="--enable-debug"
      build_type=Debug
      enable_debug_flag=1
    ;;

    --enable-ulinux)
      if [ `uname` != "Linux" ]; then
          echo "Cannot build for ULINUX on non-Linux platforms" >& 2
          exit 1
      fi
      if [ "$NOULINUX" = "1" ]; then
          echo "Conflicting qualifers: --enable-ulinux and --noenable-ulinux can't be specified together" >& 2
          exit 1
      fi
      ULINUX=1
    ;;

    --noenable-ulinux)
      if [ `uname` != "Linux" ]; then
          echo "Cannot build for ULINUX on non-Linux platforms" >& 2
          exit 1
      fi
      if [ "$ULINUX" = "1" ]; then
          echo "Conflicting qualifers: --enable-ulinux and --noenable-ulinux can't be specified together" >& 2
          exit 1
      fi
      NOULINUX=1
    ;;

    --enable-open-source)
      opensource_distro=1
    ;;

    *)
      echo "configure: invalid option '$opt'" >& 2
      echo "Try configure --help' for more information." >& 2
      exit 1
    ;;

  esac

done

if [ "$help" = "1" ]; then

    cat<<EOF

Usage: ./configure [OPTIONS]

OVERVIEW:

This script configures SCXOM for building. Type the following commands.

    $ ./configure
    $ make

OPTIONS:
    -h, --help                  Print this help message.
    --enable-debug              Perform a debug build.
    --[no]enable-ulinux         Specifies platform as ULINUX (Linux only);
                                ULINUX is assumed on universal build systems
    --enable-open-source        Build for open source distribution

EOF
    exit 0
fi

omi_configure_quals="${enable_debug} ${enable_omi_tools} ${omi_configure_quals}"
pal_configure_quals="${enable_debug}"

if [ "$ULINUX" -eq 1 -a "$opensource_distro" -eq 1 ]; then
    echo "*** ULINUX not permitted for open source distributions; ULINUX disabled ***" >& 2
    ULINUX=0
fi

if [ "$opensource_distro" -eq 1 ]; then
    # We really don't want ULINUX, not even defaulted
    NOULINUX=1
fi

# See if we're running on a SuSE 10 (universal) system; if so, assume ULINUX
if [ "$NOULINUX" != "1" ]; then
    if [ -e /etc/SuSE-release ]; then 
        PF_MAJOR=`head -n 1 /etc/SuSE-release | sed 's/.* \([0-9][0-9]*\)[ \.].*/\1/'`
        PF_MINOR=`(head -n 1 /etc/SuSE-release | sed 's/.* [0-9][0-9]*[\.]\([0-9][0-9]*\).*/\1/') | grep -v '[^0-9]' || echo '0'`
        if [ "$PF_MAJOR" = "10" -a "$PF_MINOR" = "0" ]; then
            ULINUX=1
        fi
    fi
fi

# Note: Most of this code came from the PAL configure file

set_ulinux_pf() 
{
    PF_MAJOR=1
    PF_MINOR=0
    PF_DISTRO=ULINUX

    if [ -e /usr/bin/dpkg ]; then
        BUILD_DPKG=1
        PKG_SUFFIX=deb
    else
        if [ -e /usr/bin/rpmbuild ]; then
            BUILD_RPM=1
        else
            echo "Can't determine if this system should build .DEB or .RPM packages" >& 2
            exit 1
        fi
    fi
}

uname=`uname`
case $uname in
    Linux)
        PF=Linux
        PKG_SUFFIX=rpm
        if [ -e /etc/SuSE-release ]; then 
            CHECK_SUSE=1
        fi
        if [ -e /etc/redhat-release ]; then
            CHECK_RHEL_OR_CENTOS=1
        fi
        if [ -n "$CHECK_RHEL_OR_CENTOS" ]; then
            CHECK_CENTOS=`grep -i "Red Hat" /etc/redhat-release || echo 1`
            if [ "$CHECK_CENTOS" != "1" ]; then
                CHECK_RHEL=1
            fi
        fi

        if [ "$ULINUX" = "1" ]; then
            set_ulinux_pf
            BUILD_RPM=1
            BUILD_DPKG=1
        elif [ -n "$CHECK_SUSE" ]; then
            PF_MAJOR=`head -n 1 /etc/SuSE-release | sed 's/.* \([0-9][0-9]*\)[ \.].*/\1/'`
            PF_MINOR=`(head -n 1 /etc/SuSE-release | sed 's/.* [0-9][0-9]*[\.]\([0-9][0-9]*\).*/\1/') | grep -v '[^0-9]' || echo '0'`
            PF_DISTRO=SUSE
        elif [ -n "$CHECK_RHEL" ]; then
            PF_MAJOR=`head -n 1 /etc/redhat-release | sed 's/.* \([0-9][0-9]*\)[ \.].*/\1/'`
            PF_MINOR=`(head -n 1 /etc/redhat-release | sed 's/.* [0-9][0-9]*[\.]\([0-9][0-9]*\).*/\1/') | grep -v '[^0-9]' || echo '0'`
            PF_DISTRO=REDHAT
        elif [ -n "$CHECK_CENTOS" ]; then
            PF_MAJOR=`head -n 1 /etc/redhat-release | sed 's/.* \([0-9][0-9]*\)[ \.].*/\1/'`
            PF_MINOR=`(head -n 1 /etc/redhat-release | sed 's/.* [0-9][0-9]*[\.]\([0-9][0-9]*\).*/\1/') | grep -v '[^0-9]' || echo '0'`
            if [ $PF_MAJOR -eq 5 -a $PF_MINOR -eq 0 ]; then
                set_ulinux_pf
                BUILD_RPM=1
                BUILD_DPKG=1
                ULINUX=1
            else
                PF_DISTRO=REDHAT
            fi
        elif [ -e /etc/lsb-release ]; then
            source /etc/lsb-release
            if [ "$DISTRIB_ID" = "Ubuntu" ]; then
                PF_MAJOR=`echo $DISTRIB_RELEASE | cut -d '.' -f 1`
                PF_MINOR=`echo $DISTRIB_RELEASE | cut -d '.' -f 2`
                PF_DISTRO=UBUNTU
                PKG_SUFFIX=deb
                BUILD_DPKG=1
            else
                set_ulinux_pf
            fi
        else
            set_ulinux_pf
        fi

        case `uname -m` in
            *64*)
                PF_ARCH=x64
                ARCH=x64
                RUBY_ARCH=x86_64-linux
                RUBY_ARCM=x86_64-linux
            ;;
            *86*)
                PF_ARCH=x86
                ARCH=ia32
                RUBY_ARCH=x86-linux
                RUBY_ARCM=`uname -m`-linux
            ;;
            *athlon*)
                PF_ARCH=x86
                ARCH=ia32
                RUBY_ARCH=x86-linux
                RUBY_ARCM=`uname -m`-linux
            ;;
            *)
                PF_ARCH=UNKNOWN
                ARCH=UNKNOWN
            ;;
        esac

        if [ "$PF_ARCH" = "x86" ]; then
            PF_WIDTH=32
        else
            PF_WIDTH=64
        fi
    ;;

esac

if [ "$uname" = "Linux" ]; then
    BUILD_CONFIGURATION=${PF}_${PF_DISTRO}_${PF_MAJOR}.${PF_MINOR}_${PF_ARCH}_${PF_WIDTH}_${build_type}
else
    BUILD_CONFIGURATION=${PF}_${PF_MAJOR}.${PF_MINOR}_${PF_ARCH}_${PF_WIDTH}_${build_type}
fi

cat <<EOF > config.mak
ENABLE_DEBUG=$enable_debug_flag
OMI_CONFIGURE_QUALS="$omi_configure_quals"
RUBY_CONFIGURE_QUALS="$ruby_configure_quals"

BUILD_TYPE=$build_type
PF=$PF
PF_MAJOR=$PF_MAJOR
PF_MINOR=$PF_MINOR
PF_ARCH=$PF_ARCH
ARCH=$ARCH
RUBY_ARCH=$RUBY_ARCH
RUBY_ARCM=$RUBY_ARCM
PF_WIDTH=$PF_WIDTH
PF_DISTRO=$PF_DISTRO
ULINUX=$ULINUX
BUILD_CONFIGURATION=$BUILD_CONFIGURATION
PACKAGE_SUFFIX=$PKG_SUFFIX
EOF


# Fix permissions in case they aren't executable - and then configure OMI
chmod ug+x ${scxomi_dir}/configure ${scxomi_dir}/buildtool
(cd ${scxomi_dir} && ./configure ${omi_configure_quals})

# Fix permissions in case they aren't executable - and then configure PAL
chmod ug+x ${scxpal_dir}/build/configure
(cd ${scxpal_dir}/build && ./configure ${pal_configure_quals})

# Display some information for our own configuration
if [ "$ULINUX" = "1" ]; then
    echo "Configured OMS for ULINUX build"
else
    echo "Configured OMS for non-ULINUX build"
fi
