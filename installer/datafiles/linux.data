%Variables
PF:          'Linux'
RSYSLOG_LN:  '/etc/rsyslog.d/95-omsagent.conf'
CONF_DIR:    '/etc/opt/microsoft/omsagent/conf'

%Directories
/etc;                                                   755; root; root; sysdir
/etc/init.d;                                            755; root; root; sysdir

%Files
/etc/init.d/omsagent;                                                   installer/scripts/omsagent.ulinux;                     755; root; root

%OmiService_funcs
StopOmiServer() {
    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d omiserverd stop
    elif [ -x /sbin/service ]; then
        /sbin/service omiserverd stop
    else
        echo "Unrecognized service controller to start OMI service" 1>&2
        exit 1
    fi
}

StartOmiServer() {
    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d omiserverd start
    elif [ -x /sbin/service ]; then
        /sbin/service omiserverd start
    else
        echo "Unrecognized service controller to start OMI service" 1>&2
        exit 1
    fi
}

RestartOmiServer() {
    if [ $OMI_IS_RUNNING -eq 1 ]; then
        StopOmiServer
    fi
    StartOmiServer
}

%OMSService_funcs
RemoveOMSService() {
    if [ -x /usr/sbin/update-rc.d ]; then
        /usr/sbin/update-rc.d omsagent defaults > /dev/null
    elif [ -x /usr/lib/lsb/remove_initd ]; then
        /usr/lib/lsb/remove_initd /etc/init.d/omsagent
    elif [ -x /sbin/chkconfig ]; then
        /sbin/chkconfig --del omsagent > /dev/null
    else
        echo "Unrecognized service controller to unregister omsagent service."
        exit 1
    fi
}

RegisterOMSService() {
    if [ -x /usr/sbin/update-rc.d ]; then
        /usr/sbin/update-rc.d omsagent defaults > /dev/null
    elif [ -x /usr/lib/lsb/install_initd ]; then
        /usr/lib/lsb/install_initd /etc/init.d/omsagent
    elif [ -x /sbin/chkconfig ]; then
        /sbin/chkconfig --add omsagent > /dev/null
    else
        echo "Unrecognized service controller to configure OMS service."
        exit 1
    fi

    # If we have systemctl here, tell it to reload (resolves transient problems)
    which systemctl > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        systemctl daemon-reload
    fi
}

%rsyslog_funcs
RestartRsyslog() {
    # If /etc/rsyslog.d doesn't exist, then rsyslog likely isn't here
    if [ ! -d /etc/rsyslog.d ]; then
        return 1
    fi

    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d rsyslog restart
    elif [ -x /sbin/service ]; then
        /sbin/service rsyslog restart
    else
        echo "Unrecognized service controller to restart rsyslog service" 1>&2
        exit 1
    fi
}

%Preinstall_1000
#include OMSService_funcs
#include OmiService_funcs

# If our service is already running, stop it
if [ -f /opt/microsoft/omsagent/bin/service_control ]; then
   /opt/microsoft/omsagent/bin/service_control stop
fi

# Add the 'omsagent' group if it does not already exist
# (Can't use useradd with -U since that doesn't exist on older systems)
egrep -q "^omsagent:" /etc/group
if [ $? -ne 0 ]; then
    echo "Creating omsagent group ..."
    groupadd -r omsagent
fi

# Add the 'omsagent' service account if it does not already exist
egrep -q "^omsagent:" /etc/passwd
if [ $? -ne 0 ]; then
    echo "Creating omsagent service account ..."
    useradd -r -c "OMS agent" -d /var/opt/microsoft/omsagent/run -g omsagent -s /bin/bash omsagent
fi

%Postinstall_200
#include OMSService_funcs
#include OmiService_funcs
#include CheckIfOmiIsRunning
#include rsyslog_funcs

if [ ! -f ${{CONF_DIR}}/rsyslog-oms.conf ]; then
    cp /etc/opt/microsoft/omsagent/sysconf/rsyslog-oms.conf ${{CONF_DIR}}
    chown omsagent:omsagent ${{CONF_DIR}}/rsyslog-oms.conf
fi

# We create a symlink in rsyslog.d so that DSC can update the pointee
if [ -d /etc/rsyslog.d -a ! -h ${{RSYSLOG_LN}} ]; then
    ln -s /etc/opt/microsoft/omsagent/conf/rsyslog-oms.conf ${{RSYSLOG_LN}}
fi
# TODO support syslog-ng

RestartRsyslog
RestartOmiServer

RegisterOMSService
/opt/microsoft/omsagent/bin/service_control start

%Preuninstall_10
#include OmiService_funcs
#include OMSService_funcs

#include CheckIfOmiIsRunning
if [ $OMI_IS_RUNNING -eq 1 ]; then
    StopOmiServer
fi

if [ -f /opt/microsoft/omsagent/bin/service_control ]; then
    /opt/microsoft/omsagent/bin/service_control stop
fi

RemoveOMSService

%Postuninstall_1000
#include OmiService_funcs
#include CheckIfOmiIsRunning
#include rsyslog_funcs

# If we're called for upgrade, don't do anything
if ${{PERFORMING_UPGRADE_NOT}}; then
    # Restart the OMI server in case an agent is running under service account
    RestartOmiServer

    # Remove the service account
    echo "Deleting omsagent service account ..."
    userdel omsagent

    if [ $? -eq 0 ]; then
        # Depending on system settings, the group may not have been deleted
        egrep -q "^omsagent:" /etc/group
        if [ $? -eq 0 ]; then
            echo "Deleting omsagent group ..."
            groupdel omsagent
        fi
    fi

    rm -f ${{RSYSLOG_LN}}
    RestartRsyslog
fi
