%Variables
PF:           'Linux'
RSYSLOG_DEST: '/etc/rsyslog.d/95-omsagent.conf'
OMI_SERVICE:  '/opt/omi/bin/service_control'
OMS_SERVICE:  '/opt/microsoft/omsagent/bin/service_control'

%Directories
/etc;                                                   755; root; root; sysdir
/etc/init.d;                                            755; root; root; sysdir

%Files
/etc/opt/microsoft/omsagent/sysconf/omsagent.ulinux;                    installer/scripts/omsagent.ulinux;                     755; root; root
/etc/opt/microsoft/omsagent/sysconf/omsagent.systemd;                   installer/scripts/omsagent.systemd;                    755; root; root


%OMSService_funcs
StopOMSService() {
    if [ -f ${{OMS_SERVICE}} ]; then
        ${{OMS_SERVICE}} stop
    fi
}

RemoveOMSService() {
    # Stop the server if it's running
    StopOMSService

    # Registered as a systemd service?
    if [ -f /usr/lib/systemd/system/omsagent.service ]; then
        rm -f /usr/lib/systemd/system/omsagent.service
    elif [ -f /etc/init.d/omsagent ]; then
        if [ -f /usr/sbin/update-rc.d ]; then
            /usr/sbin/update-rc.d -f omsagent remove
        elif [ -x /usr/lib/lsb/remove_initd ]; then
            /usr/lib/lsb/remove_initd /etc/init.d/omsagent
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --del omsagent > /dev/null
        else
            echo "Unrecognized Service Controller to unregister OMS Agent Service."
            exit 1
        fi

        rm /etc/init.d/omsagent
    fi
}

ConfigureOMSService() {
    echo "Configuring OMS agent service ..."
    pidof systemd 1> /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        # systemd
        cp /etc/opt/microsoft/omsagent/sysconf/omsagent.systemd /usr/lib/systemd/system/omsagent.service
        /usr/bin/systemctl daemon-reload
    else
        cp /etc/opt/microsoft/omsagent/sysconf/omsagent.ulinux /etc/init.d/omsagent

        if [ -x /usr/sbin/update-rc.d ]; then
            update-rc.d omsagent defaults > /dev/null
        elif [ -x /usr/lib/lsb/install_initd ]; then
            /usr/lib/lsb/install_initd /etc/init.d/omsagent
        elif [ -x /sbin/chkconfig ]; then
            chkconfig --add omsagent > /dev/null
        else
            echo "Unrecognized Service Controller to configure OMS Agent Service."
            exit 1
        fi
    fi

    ${{OMS_SERVICE}} start
}

%rsyslog_funcs
RestartRsyslog() {
    # If /etc/rsyslog.d doesn't exist, then rsyslog likely isn't here
    if [ ! -d /etc/rsyslog.d ]; then
        return 1
    fi

    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d rsyslog restart
    elif [ -x /sbin/service ]; then
        /sbin/service rsyslog restart
    else
        echo "Unrecognized service controller to restart rsyslog service" 1>&2
        exit 1
    fi
}

%Preinstall_1000
#include OMSService_funcs

# If our service is already running, stop it
if [ -f /opt/microsoft/omsagent/bin/service_control ]; then
   /opt/microsoft/omsagent/bin/service_control stop
fi

# Add the 'omsagent' group if it does not already exist
# (Can't use useradd with -U since that doesn't exist on older systems)
egrep -q "^omsagent:" /etc/group
if [ $? -ne 0 ]; then
    echo "Creating omsagent group ..."
    groupadd -r omsagent
fi

# Add the 'omsagent' service account if it does not already exist
egrep -q "^omsagent:" /etc/passwd
if [ $? -ne 0 ]; then
    echo "Creating omsagent service account ..."
    useradd -r -c "OMS agent" -d /var/opt/microsoft/omsagent/run -g omsagent -s /bin/bash omsagent
fi

%Postinstall_200
#include OMSService_funcs
#include rsyslog_funcs

# Install our rsyslog conf file
if [ -d /etc/rsyslog.d -a ! -f ${{RSYSLOG_DEST}} ]; then
    cp /etc/opt/microsoft/omsagent/sysconf/rsyslog-oms.conf ${{RSYSLOG_DEST}}
    chown omsagent:omsagent ${{RSYSLOG_DEST}}
    RestartRsyslog
fi

# TODO support syslog-ng

# Reload the OMI server
${{OMI_SERVICE}} reload

ConfigureOMSService

%Preuninstall_10
#include OMSService_funcs

if [ -f /opt/microsoft/omsagent/bin/service_control ]; then
    /opt/microsoft/omsagent/bin/service_control stop
fi

RemoveOMSService

%Postuninstall_1000
#include rsyslog_funcs

# If we're called for upgrade, don't do anything
if ${{PERFORMING_UPGRADE_NOT}}; then
    # Restart the OMI server in case an agent is running under service account
    ${{OMI_SERVICE}} restart

    # Remove the service account
    echo "Deleting omsagent service account ..."
    userdel omsagent

    if [ $? -eq 0 ]; then
        # Depending on system settings, the group may not have been deleted
        egrep -q "^omsagent:" /etc/group
        if [ $? -eq 0 ]; then
            echo "Deleting omsagent group ..."
            groupdel omsagent
        fi
    fi

    rm -f ${{RSYSLOG_DEST}}
    RestartRsyslog
fi
